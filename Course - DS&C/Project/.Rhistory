ni <- b[index]
ni <- b[[nitrate]] & index
ni <- b[["nitrate"]] & index
nits < b[["nitrate"]]
nits <- b[["nitrate"]]
ni <- nits[index]
try <-b[["nitrate"]][index]
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 1000)
head(cr)
summary(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
summary(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
summary(cr)
length(cr)
View(cr)
View(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
View(complete)
View(temp)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
summary(cr)
summary(round(cr, 3))
summary(round(cr, 4))
source('~/Data Science/Workspace/polluntantmean.R')
source('~/Data Science/Workspace/complete.R')
pollutantmean("specdata", "sulfate", 1:10)
round(pollutantmean("specdata", "nitrate", 70:72), 3)
round(pollutantmean("specdata", "sulfate", 34), 3)
round(pollutantmean("specdata", "sulfate"), 3)
round(pollutantmean("specdata", "nitrate"), 3)
cc <- compete("specdata", c(6,10,20,34,100,200,310))
cc <- complete("specdata", c(6,10,20,34,100,200,310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata",332:1)
use <- sample(332,10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
set.seed(197)
out <- c(n, round(cr[sample(n,5)],4))
n <- length(cr)
out <- c(n, round(cr[sample(n,5)],4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr,4)))
x <- list(a=1:5, b = rnorm(10))
lapply(x, mean)
x<- list(a=matrix(1:4,2,2), b=matrix(1:6, 3,2))
lapply(x, function(elt) elt[,1])
str(apply)
x <- matrix(rnorm(200), 20,10)
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,quantile, probs = c(0.25,0.75))
a <- array(rnorm(2 * 2* 10), c(2,2,10))
apply(a, c(1,2), mean)
source('~/Data Science/Workspace/my_functions.R')
x <- log(-1)
printmessage(x)
source('~/Data Science/Workspace/my_functions.R')
printmessage(x)
swirl()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(unique_vals, unique)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, mean)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length
)
vapply(iris$Sepal.Length, iris$Species, mean)
iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
colmeans(iris)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars,mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
b <- with(mtcars, tapply(hp, cyl, mean))
b[3] - b[1]
debug(ls)
ls
getwd()
install.packages("RMySQL")
ucscDb <- dbConnect(MYSQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
library(RMySQL)
ucscDb <- dbConnect(MYSQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
dbDisconnect(ucscDb)
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host ="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
dbClearResult(query)
dbClearResult(query)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(hdf5)
created = h5createFile("example.h5")
created
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(hdf5)
created = h5createFile("example.h5")
created
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.00,by=0.1), dim=c(5,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.00,by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.00,by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab", "cde", "fghi", "a", "s") stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
h5close()
H5close("example.h5")
H5close()
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab", "cde", "fghi", "a", "s") stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
H5close()
readA = h5read("example.h5", "foo/A")
A
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5", "foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
google = handle("http://google.com")
pg1 = GET(handle = google, path="/")
pg2 = GET(handle = google, path="search")
pg1
pg2
myapp = oauth_app("twitter", key = "OA82Rt05pjE5dB9drifqd3Q3G", secret = "4QuVqZ7fduB1Kx28WBPc29W77aVL34xy4GiY90ZwDZ3Cr3uOqE")
sig = sign_oauth1.0(myapp, token="951722202-TXfBI4IahowpROAV840GAkWtKZy31m6eZYUyiOG5"
token_secret = "MEEKcJPw3we18QpojRnaGIHq5Kpgq13nigzm4w0Huf03H")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
myapp = oauth_app("twitter", key = "OA82Rt05pjE5dB9drifqd3Q3G", secret = "4QuVqZ7fduB1Kx28WBPc29W77aVL34xy4GiY90ZwDZ3Cr3uOqE")
sig = sign_oauth1.0(myapp, token="951722202-TXfBI4IahowpROAV840GAkWtKZy31m6eZYUyiOG5",
token_secret = "MEEKcJPw3we18QpojRnaGIHq5Kpgq13nigzm4w0Huf03H")
myapp = oauth_app("twitter", key = "OA82Rt05pjE5dB9drifqd3Q3G", secret = "4QuVqZ7fduB1Kx28WBPc29W77aVL34xy4GiY90ZwDZ3Cr3uOqE")
sig = sign_oauth1.0(myapp, token="951722202-TXfBI4IahowpROAV840GAkWtKZy31m6eZYUyiOG5",1
token_secret = "MEEKcJPw3we18QpojRnaGIHq5Kpgq13nigzm4w0Huf03H")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
library(jsonlite)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
setwd("./Course - DS&C/Project")
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
library(data.table)
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
dim(a)
class(a)
a[[1]]
a[[1]][1]
class(a[[1]][1])
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
a
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
a
head(a, n=8)
grep("*std()", a$V2)
grep("*mean()", a$V2)
head(a, n=10)
tail(a, n=10)
tail(a, n=25)
grep("mean()" | "std()", a$V2)
grep("^t", a$V2)
grep("mean() | std()", a$V2)
grep("*mean() | *std()", a$V2)
grep("*(mean() | std())", a$V2)
grep("*mean() | std()", a$V2)
grep("*mean() | *std()", a$V2)
grep("*mean()", a$V2)
grep("*mean()|*std()", a$V2)
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
a
install.packages("dtplyr")
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
a
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
a
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a
a <- getPData()
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
source('~/Data Science/Workspace/Course - DS&C/Project/getPData.R')
a <- getPData()
?readLines
X_test <- fread("./ProjData/test/X_test.txt", sep = " ")
y_test <- fread("./ProjData/test/y_test.txt", sep = " ")
subject_test <- fread("./ProjData/test/subject_test.txt", sep = " ")
X_train <- fread("./ProjData/train/X_train.txt", sep = " ")
y_train <- fread("./ProjData/train/y_train.txt", sep = " ")
subject_train <- fread("./ProjData/train/subject_train.txt", sep = " ")
features <- fread("./ProjData/features.txt")
#feature_indices <- grep("*mean()|*std()", features$V2)
feature_indices <- grep("*mean()|*std()", features$V2)
test_sub <- select(X_test, feature_indices)
X_train <- select(X_train, feature_indices)
X_test <- select(X_test, feature_indices)
library(tidyr)
View(y_test)
View(y_test)
y_test.SD
?.SD
activity_labels <- fread("./ProjData/activity_labels.txt")
activity_labels[1]
activity_labels[2]
activity_labels[2,2]
activity_labels[1,2]
activity_labels[1][2]
activity_labels[3]
activity_labels[3][2]
activity_labels[3, 2]
activity_labels['V2',3]
?data.table
activity_labels[1,2]
activity_labels[,2]
activity_labels[,V2]
activity_labels[1,V2]
activity_labels[2,V2]
temp <- lapply(y_train$V1, function(x) {replace(x, activity_labels[x,V2])})
?repalce
?replace
dim(y_train)
dim(y_train)[1]
?set
temp <-lapply(y_train$V1, function(x) {activity_labels[x,V2]})
head(temp)
View(y_train)
head(temp)
?set
for( i in 1:dim(y_test)[1] set(y_test, i, 1, activity_labels[i,V2]))
for(i in 1:dim(y_test)[1]){set(y_test, i, 1, activity_labels[i,V2])}
dim(y_test)[1]
for(i in 1:dim(y_test)[1]){set(y_test, i, 1, activity_labels[i,V2])}
?for
??for
for(i in 1:(dim(y_test)[1])){set(y_test, i, 1, activity_labels[i,V2])}
warnings(for(i in 1:(dim(y_test)[1])){set(y_test, i, 1, activity_labels[i,V2])})
?replace
?data.table
DT = data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DT
activity_test = data.table(activity_labels[y_test$V1,V2])
head(activity_test)
class(activity_test$V1)
head(activity_test, n=25)
activity_labels[y_test$V1,V2]
y_test$V1
View(y_test)
View(y_test)
y_test <- fread("./ProjData/test/y_test.txt", sep = " ")
y_test
y_test$V1
activity_labels[y_test$V1,V2]
activity_test = data.table(Activity = activity_labels[y_test$V1,V2])
head(activity_test)
head(subject_test)
head(subject_train)
?merge
?rbind
xlist = list(X_train, X_test)
xData = rbindlist(xlist)
xlist = list(X_test, X_train)
xData = rbindlist(xlist)
ylist = list(y_test, y_train)
xData = rbindlist(ylist)
sublist = list(subject_test, subject_train)
subData = rbindlist(sublist)
xlist = list(X_test, X_train)
xData = rbindlist(xlist)
ylist = list(y_test, y_train)
yData = rbindlist(ylist)
sublist = list(subject_test, subject_train)
subData = rbindlist(sublist)
aData = data.table(Activity = activity_labels[yData$V1,V2])
t <- cbind(aData,xData)
head(t)
features
features[feature_indices, V2]
temp <- head(xData)
names(temp) <- features[feature_indices,V2]
names(temp)
head(temp)
?cbind
names(subData) <- "Subject"
head(subData)
allData <- cbind(subData, aData, xData)
View(DT)
allData <- gather(allData, signal, measurment, -Subject, -Activity)
head(allData)
#Step 0: Merge the test and training data (test data on top)
xlist = list(X_test, X_train)
xData = rbindlist(xlist)
ylist = list(y_test, y_train)
yData = rbindlist(ylist)
sublist = list(subject_test, subject_train)
subData = rbindlist(sublist)
names(subData) <- "Subject"
#Step 1: Identify/extract the columns with mean/std
feature_indices <- grep("*mean()|*std()", features$V2)
xData <- select(xData, feature_indices)
names(xData) <- features[feature_indices, V2]
#Step 2: Build the activity column from the y variable
aData = data.table(Activity = activity_labels[yData$V1,V2])
#step 3: Put it all into one table
allData <- cbind(subData, aData, xData)
head(allData)
allData <- gather(allData, signal, measurment, -Subject, -Activity)
head(allData)
allData <- seperate(allData, signal, c("Domain", "Signal"),1)
allData <- separate(allData, signal, c("Domain", "Signal"),1)
head(allData)
head(allData, 35)
head(allData, 95)
tail(allData, 95)
d2 <- separate(allData, signal, c("Signal", "Mean
d2 <- separate(allData, signal, c("Signal", "Measure"), "-")
d2 <- separate(allData, Signal, c("Signal", "Measure"), "-")
d2 <- separate(allData, Signal, c("Signal", "Measure"), "\-")
d2 <- separate(allData, Signal, c("Signal", "Measure"), "-{1}")
d2 <- separate(allData, Signal, c("Signal", "Measure"), '-')
?separate
d2 <- separate(allData, Signal, c("Signal", "Measure"), '-', extra = merge)
d2 <- separate(allData, Signal, c("Signal", "Measure"), "-", extra = merge)
d2 <- separate(allData, Signal, c("Signal", "Measure"), "-", extra = "merge")
head(d2)
d3 <- separate(d2, Measure, c("Measure","Axis"), "-", fill = "right")
head(d3)
tail(d3)
