library(jsonlite)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
load("~/Data Science/Workspace/Course - DS&C/Week 3 Notes.Rmd")
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution0
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg = table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in e
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1), margin= c(4,4,2,1))
par(mfrow=c(2,1), mar= c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main ="West")
plot(east$latitude, east$pm25, main ="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
deve.cur()
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displm, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue". col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()?pin
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month ==5)
points(may$Wind, may$Ozone, col = "blue", pch = 2)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind, lty=2, lwd = 2)
)
abline(v=median(airquality$Wind, lty=2, lwd = 2))
abline(v=median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red, "blue"))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2-
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pals <- colorRampPalette(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volanco, col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
mthigh
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ . , binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 0.5)
g+geom_point(size = 4, alpha = 0.5, aes(color = drv))
g+geom_point(size = 4, alpha = 0.5, aes(color = drv))+labs(title = "Swirl Rules!") +labs(x="Displacement", y = "Hwy Mileage")
g+geom_point(aes(color = drv))+labs(title = "Swirl Rules!") +labs(x="Displacement", y = "Hwy Mileage")
g+geom_point(aes(color = drv), size = 4, alpha = 0.5)+geom_smooth(size = 4, linetype = 3, menthod = "lm", se = FALSE)
g+geom_point(aes(color = drv), size = 4, alpha = 0.5)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x=myx, y-myy))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ, y = hwy, color = factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size = 2, color = "black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size = 2, color = "black")+labs(title="Swirl Rules!", x = "Displacement", y = "Hwy Mileage")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size = 2, color = "black")+labs(title="Swirl Rules!", x = "Displacement", y = "Highway Mileage")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size = 2, color = "black")+labs(x = "Displacement", y = "Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut, geom_spoke(method = "lm"))
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
?qplot
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$cut2 <- cut(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(x=depth, y=price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size = 3, color = "pink")
ggplot(diamonds, aes(x=carat, y=price))+geom_boxplot()+facet_grid(.~cut)
install.packages("kernlab")
library(kernlab)
data("spam")
setwd("Course - Reproducible Research/RR_PeerAssessment2")
#Read in the data
RawData <- read.csv(destfile)
#Create a file to download the data to
if (!dir.exists("data")) {
dir.create("data")
}
#Download the data
fileurl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destfile <- "data/Stormdata.csv.bz2"
if (!file.exists(destfile)) {
download.file(fileurl, destfile)
}
#Read in the data
RawData <- read.csv(destfile)
library(dplyr)
#Store processed data in a new dataframe
ProData <- RawData
Marine1 <- grep("^MARINE THUNDERSTORM", ProData$EVTYPE)
Marine2 <- grep("^MARINE TSTM", ProData$EVTYPE)
ProData$EVTYPE[Marine1] <- "MARINE THUNDERSTORM WIND"
ProData$EVTYPE[Marine2] <- "MARINE THUNDERSTORM WIND"
Thun1 <- grep("^TSTM W", ProData$EVTYPE)
Thun2 <- grep("^THUNDERSTORM", ProData$EVTYPE)
ProData$EVTYPE[Thun1] <- "THUNDERSTORM WIND"
ProData$EVTYPE[Thun2] <- "THUNDERSTORM WIND"
ProData$EVTYPE[grep("HEAVY SNOW", ProData$EVTYPE)] <- "HEAVY SNOW"
ProData$EVTYPE[grep("^HAIL", ProData$EVTYPE)] <- "HAIL"
ProData$EVTYPE[grep("BLIZZARD", ProData$EVTYPE)] <- "BLIZZARD"
ProData$EVTYPE[grep("HURRICANE", ProData$EVTYPE)] <- "HURRICANE"
ProData$EVTYPE[grep("TYPHOON", ProData$EVTYPE)] <- "HURRICANE"
ProData$EVTYPE[grep("^HEAT", ProData$EVTYPE)] <- "HEAT"
ProData$EVTYPE[grep("FIRE", ProData$EVTYPE)] <- "WILDFIRE"
health <- ProData %>% group_by(EVTYPE) %>% summarise(INJURIES = sum(INJURIES + FATALITIES))
#Sort the weather events with the most health impacts to least
health <- health[order(-health$INJURIES),]
head(health)
total_injuries <- sum(health$INJURIES)
View(health)
Thun1 <- grep("^TSTM W", ProData$EVTYPE)
Thun2 <- grep("^THUNDER", ProData$EVTYPE)
ProData$EVTYPE[Thun1] <- "THUNDERSTORM WIND"
ProData$EVTYPE[Thun2] <- "THUNDERSTORM WIND"
ProData$EVTYPE[grep("LIGHT", ProData$EVTYPE)] <- "LIGHTNING"
health <- ProData %>% group_by(EVTYPE) %>% summarise(INJURIES = sum(INJURIES + FATALITIES))
#Sort the weather events with the most health impacts to least
health <- health[order(-health$INJURIES),]
head(health)
View(health)
ProData$EVTYPE[grep("EXTREME", ProData$EVTYPE)] <- "EXTREME COLD/WIND CHILL"
health <- ProData %>% group_by(EVTYPE) %>% summarise(INJURIES = sum(INJURIES + FATALITIES))
#Sort the weather events with the most health impacts to least
health <- health[order(-health$INJURIES),]
head(health)
total_injuries <- sum(health$INJURIES)
?mutate
total_injuries <- sum(health$INJURIES)
mutate(health, prop = 100*INJURIES/total_injuries)
head(ProData)
r <- ProData[1:2000,]
View(r)
View(r)
count(ProData$CROPDMG >0)
sum(ProData$CROPDMG)
unique(ProData$PROPDMGEXP)
str(ProData$PROPDMGEXP)
summary(ProData$PROPDMGEXP)
summary(ProData$CROPDMGEXP)
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
names(magnitude) <- c("k", "K", "m", "M", "b", "B")
head(magnitude)
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(manitude) <- units
econ <- subset(ProData, PROPDMGEXP %in$% units | CROPDMGEXP %in% units)
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(manitude) <- units
econ <- subset(ProData, PROPDMGEXP %in% units | CROPDMGEXP %in% units)
e2 <- ProData("EVTYPE")
e2 <- ProDat[,"EVTYPE"]
e2 <- ProData[,"EVTYPE"]
e2 <- ProData[,c("EVTYPE", "PROPDMG")]
magniute["K"]
magnitude["K"]
magnitude[,"K"]
magnitude["K"]
head(magnitude)
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(manitude) <- units
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(magnitude) <- units
magnitude
magnitude["K"]
#Create a look up table for the magnitude units
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(magnitude) <- units
#Create a vector of the columns we want for econ data
econ_col <- c("EVTYPE", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
EconData <- ProData[,econ_col]
#Subset the valid entries for dmg
econ <- subset(EconData, PROPDMGEXP %in% units | CROPDMGEXP %in% units)
#Create a look up table for the magnitude units
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(magnitude) <- units
#Create a vector of the columns we want for econ data
econ_col <- c("EVTYPE", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
EconData <- ProData[,econ_col]
#Subset the valid entries for dmg
EconData <- subset(EconData, PROPDMGEXP %in% units | CROPDMGEXP %in% units)
#Create two new columns with a dollar value for the damage
EconData <- mutate(EconData, PROP = PROPDMG*magnitue[PROPDMGEXP])
EconData <- mutate(EconData, CROP = CROPDMG*magnitue[CROPDMGEXP])
#Create a look up table for the magnitude units
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(magnitude) <- units
#Create a vector of the columns we want for econ data
econ_col <- c("EVTYPE", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
EconData <- ProData[,econ_col]
#Subset the valid entries for dmg
EconData <- subset(EconData, PROPDMGEXP %in% units | CROPDMGEXP %in% units)
#Create two new columns with a dollar value for the damage
EconData <- mutate(EconData, PROP = PROPDMG*magnitude[PROPDMGEXP])
EconData <- mutate(EconData, CROP = CROPDMG*magnitude[CROPDMGEXP])
head(EconData)
str(EconData)
str(magnitude)
e3<- EconData[1,]
magnitude[EconData$PROPDMGEXP]
magnitude[e3$PROPDMGEXP]
e3$PROPDMGEXP
#Create a look up table for the magnitude units
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(magnitude) <- units
#Create a vector of the columns we want for econ data
econ_col <- c("EVTYPE", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
EconData <- ProData[,econ_col]
#Subset the valid entries for dmg
EconData <- subset(EconData, PROPDMGEXP %in% units | CROPDMGEXP %in% units)
#Create two new columns with a dollar value for the damage
EconData <- mutate(EconData, PROP = PROPDMG*magnitude[as.character(PROPDMGEXP)])
EconData <- mutate(EconData, CROP = CROPDMG*magnitude[as.character(CROPDMGEXP)])
head(EconData)
sum(EconData$PROP, na.rm = TRUE)
EconData <- EconData %>% Group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
head(EconData)
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
head(EconData)
View(EconData)
Top_EconData <- EconData[1:10,]
View(Top_EconData)
View(Top_EconData)
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
#Scale to represent billions ($)
EconData$Total_Dmg <- EconData$Total_Dmg/1000000000
#Create a vector with the top ten costliest weather types
Top_EconData <- EconData[1:10,]
View(Top_EconData)
View(Top_EconData)
total_injuries <- sum(health$INJURIES)
mutate(health, prop = 100*INJURIES/total_injuries)
#Create a vector with the top ten weather types for health impacts
Top_health <- health[1:10,]
?barplot
barplot(Top_health)
barplot(Top_health$INJURIES)
barplot(Top_health$INJURIES)
legend(Top_health$EVTYPE)
dev.off()
barplot(Top_health$INJURIES, legend = Top_health$EVTYPE)
dev.off()
barchart(Top_health$INJURIES~Top_health$EVTYPE)
library(lattice)
barchart(Top_health$INJURIES~Top_health$EVTYPE)
dev.off()
barchart(Top_health$EVTYPE~Top_health$INJURIES)
head(Top_health)
dev.off()
Top_health$EVTYPE <- reorder(Top_health$EVTYPE, Top_health$INJURIES)
barchart(Top_health$EVTYPE~Top_health$INJURIES)
dev.off()
total_injuries <- sum(health$INJURIES)
health <- mutate(health, prop = 100*INJURIES/total_injuries)
#Create a vector with the top ten weather types for health impacts
Top_health <- health[1:10,]
head(Top_health)
#Set the order of factor variables as they current are
Top_health$EVTYPE <- reorder(Top_health$EVTYPE, Top_health$prob)
#Set the order of factor variables as they current are
Top_health$EVTYPE <- reorder(Top_health$EVTYPE, Top_health$prop)
barchart(Top_health$EVTYPE~Top_health$prop)
dev.off()
barchart(Top_health$EVTYPE~Top_health$prop, xlim=c(0,100), xlab="Proportion of health events", ylab="Weather Type", main="Weather Types porportion of negative health events 1950 - Nov 2011")
dev.off()
#Set the order of factor variables as they current are
Top_EconData$EVTYPE <- reorder(Top_EconData$EVTYPE, Top_EconData$Total_Dmg)
#Create the plot
barchart(Top_EconData$EVTYPE~Top_EconData, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
dev.off()
Top_EconData$EVTYPE <- reorder(Top_EconData$EVTYPE, Top_EconData$Total_Dmg)
barchart(Top_EconData$EVTYPE~Top_EconData, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
dev.off()
barchart(Top_EconData$EVTYPE~Top_EconData, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
#Scale to represent billions ($)
EconData$Total_Dmg <- EconData$Total_Dmg/1000000000
#Create a vector with the top ten costliest weather types
Top_EconData <- EconData[1:10,]
View(Top_EconData)
barchart(Top_EconData$EVTYPE~Top_EconData, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
head(Top_EconData)
dev.off()
barchart(Top_EconData$EVTYPE~Top_EconData$Total_Dmg, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
#Scale to represent billions ($)
EconData$Total_Dmg <- EconData$Total_Dmg
#Create a vector with the top ten costliest weather types
Top_EconData <- EconData[1:10,]
#Set the order of factor variables as they current are
Top_EconData$EVTYPE <- reorder(Top_EconData$EVTYPE, Top_EconData$Total_Dmg)
#Create the plot
barchart(Top_EconData$EVTYPE~Top_EconData$Total_Dmg, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
#dev.off()
head(Top_EconData)
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
#Scale to represent billions ($)
#EconData$Total_Dmg <- EconData$Total_Dmg
Econ_Data <- mutate(Econ_Data, Total_Dmg = Total_Dmg/1000000000)
#Create a vector with the top ten costliest weather types
Top_EconData <- EconData[1:10,]
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
#Scale to represent billions ($)
#EconData$Total_Dmg <- EconData$Total_Dmg
EconData <- mutate(EconData, Total_Dmg = Total_Dmg/1000000000)
#Create a vector with the top ten costliest weather types
Top_EconData <- EconData[1:10,]
#Set the order of factor variables as they current are
Top_EconData$EVTYPE <- reorder(Top_EconData$EVTYPE, Top_EconData$Total_Dmg)
#Create the plot
barchart(Top_EconData$EVTYPE~Top_EconData$Total_Dmg, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
#dev.off()
head(Top_EconData)
#Create a look up table for the magnitude units
magnitude <- c(1000,1000,1000000,1000000,1000000000,1000000000)
units <- c("k", "K", "m", "M", "b", "B")
names(magnitude) <- units
#Create a vector of the columns we want for econ data
econ_col <- c("EVTYPE", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
EconData <- ProData[,econ_col]
#Subset the valid entries for dmg
EconData <- subset(EconData, PROPDMGEXP %in% units | CROPDMGEXP %in% units)
#Create two new columns with a dollar value for the damage
EconData <- mutate(EconData, PROP = PROPDMG*magnitude[as.character(PROPDMGEXP)])
EconData <- mutate(EconData, CROP = CROPDMG*magnitude[as.character(CROPDMGEXP)])
EconData <- EconData %>% group_by(EVTYPE) %>% summarise(Total_Dmg = sum(PROP + CROP, na.rm = TRUE))
#Sort with costliest events first
EconData <- EconData[order(-EconData$Total_Dmg),]
#Scale to represent billions ($)
#EconData$Total_Dmg <- EconData$Total_Dmg
EconData <- mutate(EconData, Total_Dmg = Total_Dmg/1000000000)
#Create a vector with the top ten costliest weather types
Top_EconData <- EconData[1:10,]
dev.off()
#Set the order of factor variables as they current are
Top_EconData$EVTYPE <- reorder(Top_EconData$EVTYPE, Top_EconData$Total_Dmg)
#Create the plot
barchart(Top_EconData$EVTYPE~Top_EconData$Total_Dmg, xlab="Cumulative Cost in billions ($)", ylab="Weather Type", main="Cumulative bill for Weather Types1950 - Nov 2011")
#dev.off()
head(Top_EconData)
