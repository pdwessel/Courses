library(swirl)
swirl()
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub[,-c(562,563)], centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[w]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log(x0), log(x1)
)
boxplot(log(x0), log(x1))
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negativem, na.rm = TRUE)
sum(negative, na.rm = TRUE)
mean(negative, na.rm na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(pm0sub$Date, "%Y%m%d")
dates0 <- as.Date(pm0sub$Date, "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub$pm25, na.rm = TRUE), lwd = 2)
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim (mrg)
head(mrg)
with( mrg, plot(rep(1:52), mrg[,2], xlim = c(.5, 2.5)))
with( mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with( mrg, plot(rep(2,52), mrg[,3]))
with( mrg, points(rep(2,52), mrg[,3]))
with( mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with( mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
exit
exit()
0
library(swirl)
swirl()
X^2
0
dice_sqr
0
exit
exit()
q()
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
lcs_list <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- spally(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
install.packages("ggmap")
install.packages("rgdal")
install.packages("rgeos")
install.packages("maptools")
install.packages("tmap")
library(maps)
library(mapproj)
install.packages("mapdata")
library(mapdata)
install.packages("rgeos")
library(rgeos)
library(maptools)
libray(sp)
library(sp)
library(raster)
library(rgdal)
plot(cars)
install.packages('caret')
install.packages('kernlab')
install.packages('ggplot2')
getwd()
setwd('Data Science/Courses')
ls()
dir()
setwd('Course - Intro ML')
dir()
Project.Rmd
open(Project.Rmd)
open('Project.Rmd')
knitr::opts_chunk$set(echo = TRUE)
#Create a file to download the data to
if (!dir.exists("data")) {
dir.create("data")
}
#Download the data
trainurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testurl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainfile <- "data/train.csv"
testfile <- "data/test.csv"
if (!file.exists(trainfile)) {
download.file(trainurl, trainfile)
}
if (!file.exists(testfile)) {
download.file(testurl, testfile)
}
ModelData <- read.csv(trainfile)
summary(ModelData)
str(ModelData)
summary(ModelData$classe)
cor(modelData)
cor(as.data.frame(modelData)
)
cor(as.data.frame(modelData))
cor(as.data.frame(ModelData))
summary(ModelData$amplitude_pitch_arm)
?apply
t1 <- sapply(ModelData, function(y) sum(length(which(is.na(y)))))
t2 <- t1 >0
t1
b1 <- is.na(ModelData$var_pitch_dumbbell)
ModelData$classe[b1]
summary(ModelData$classe[b1])
ModelData$classe*b1
summary(b1)
summary(ModelData$classe[-b1])
summary(ModelData[-b1, 'classe'])
summary(-b1)
?logical
summary(ModelData$classe[!b1])
t1
?is.element()
noInfoVariables <- c("X", "user_name", "cvtd_timestamp")
remove2 <- is.element(names(ModelData), noInfoVariables)
naVariables <- sapply(ModelData, function(y) sum(length(which(is.na(y)))))
remove1 <- naVariables > 0 #All the variables with NA values actually have 19216 missing values or 98% of the inputs.
RawData <- read.csv(trainfile)
naVariables <- sapply(RawData, function(y) sum(length(which(is.na(y)))))
remove1 <- naVariables > 0 #All the variables with NA values actually have 19216 missing values or 98% of the inputs.
noInfoVariables <- c("X", "user_name", "cvtd_timestamp")
remove2 <- is.element(names(RawData), noInfoVariables)
remove <- union(remove1, remove2)
remove <- remove1 || remove2
remove1
names(remove2) <- names(RawData)
union(remove1, remove2)
remove1 | remove2
remove <-  remove1|remove2
sub1 <- RawData[remove]
summary(t1)
summary(remove1)
remove <-  !remove1|remove2
sub1 <- RawData[remove]
#load all relevant libraries
library(caret); library(kernlab); library(ggplot2)
#load all relevant libraries
library(caret); library(kernlab); library(ggplot2)
remove <- !remove1|remove2
ModelData <- RawData[remove]
inTrain <- createDataPartition(y=ModelData$classe, p=0.75, list=FALSE)
training <- spam[inTrain,]
remove <- !remove1|remove2
ModelData <- RawData[remove]
inTrain <- createDataPartition(y=ModelData$classe, p=0.75, list=FALSE)
training <- ModelData[inTrain,]
testing <- ModelData[-inTrain,]
dim(training)
modelFit <- train(classe~., data = ModelData, method = "glm")
str(ModelData$amplitude_yaw_belt)
str(ModelData$amplitude_yaw_belt)
str(ModelData$gyros_belt_x)
class(modelData)
str(ModelData)
View(RawData)
remove <- !remove1&!remove2
ModelData <- RawData[remove]
inTrain <- createDataPartition(y=ModelData$classe, p=0.75, list=FALSE)
training <- ModelData[inTrain,]
testing <- ModelData[-inTrain,]
dim(training)
modelFit <- train(classe~., data = ModelData, method = "glm")
