complete("specdata", 1)
source('~/Data Science/Workspace/complete.R')
complete("specdata", 1)
complete("specdata", c(2,4,8,10,12))
complete("specdata", 30:25)
complete("specdata", 3)
?cor
complete(b)[["nobs"]]
complete("specdata" , 3)[["nobs"]]
source('~/Data Science/Workspace/corr.R')
source('~/Data Science/Workspace/complete.R')
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
source('~/Data Science/Workspace/complete.R')
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
length(my_files)
for (i in length(my_files)) {print(i)}
for (i in length(my_files)) {print(i)}
for (i in 1:length(my_files)) {print(i)}
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
head(cr)
ab <- cor(1:10, 2:11)
head(ab)
summary(ab)
length(ab)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 1000)
View(cr)
cr <- 0
nips <- which(!is.na(b[["nitrate"]]))
sufs <- which(!is.na(b[["sulfate"]]))
index <- !is.na(b[["sulfate"]]) & !is.na(b[["nitrate"]])
ni <b[index]
ni <- b[index]
ni <- b[[nitrate]] & index
ni <- b[["nitrate"]] & index
nits < b[["nitrate"]]
nits <- b[["nitrate"]]
ni <- nits[index]
try <-b[["nitrate"]][index]
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 1000)
head(cr)
summary(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
summary(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
summary(cr)
length(cr)
View(cr)
View(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
View(complete)
View(temp)
source('~/Data Science/Workspace/corr.R')
cr <- corr("specdata")
length(cr)
summary(cr)
summary(round(cr, 3))
summary(round(cr, 4))
source('~/Data Science/Workspace/polluntantmean.R')
source('~/Data Science/Workspace/complete.R')
pollutantmean("specdata", "sulfate", 1:10)
round(pollutantmean("specdata", "nitrate", 70:72), 3)
round(pollutantmean("specdata", "sulfate", 34), 3)
round(pollutantmean("specdata", "sulfate"), 3)
round(pollutantmean("specdata", "nitrate"), 3)
cc <- compete("specdata", c(6,10,20,34,100,200,310))
cc <- complete("specdata", c(6,10,20,34,100,200,310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata",332:1)
use <- sample(332,10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
set.seed(197)
out <- c(n, round(cr[sample(n,5)],4))
n <- length(cr)
out <- c(n, round(cr[sample(n,5)],4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr,4)))
x <- list(a=1:5, b = rnorm(10))
lapply(x, mean)
x<- list(a=matrix(1:4,2,2), b=matrix(1:6, 3,2))
lapply(x, function(elt) elt[,1])
str(apply)
x <- matrix(rnorm(200), 20,10)
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,quantile, probs = c(0.25,0.75))
a <- array(rnorm(2 * 2* 10), c(2,2,10))
apply(a, c(1,2), mean)
source('~/Data Science/Workspace/my_functions.R')
x <- log(-1)
printmessage(x)
source('~/Data Science/Workspace/my_functions.R')
printmessage(x)
swirl()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(unique_vals, unique)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, mean)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length
)
vapply(iris$Sepal.Length, iris$Species, mean)
iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
colmeans(iris)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars,mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
b <- with(mtcars, tapply(hp, cyl, mean))
b[3] - b[1]
debug(ls)
ls
getwd()
install.packages("RMySQL")
ucscDb <- dbConnect(MYSQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
library(RMySQL)
ucscDb <- dbConnect(MYSQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(uscsDb);
dbDisconnect(ucscDb)
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host ="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
dbClearResult(query)
dbClearResult(query)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(hdf5)
created = h5createFile("example.h5")
created
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(hdf5)
created = h5createFile("example.h5")
created
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.00,by=0.1), dim=c(5,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.00,by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.00,by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab", "cde", "fghi", "a", "s") stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
h5close()
H5close("example.h5")
H5close()
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab", "cde", "fghi", "a", "s") stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5), c("ab", "cde", "fghi", "a", "s"), stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
H5close()
readA = h5read("example.h5", "foo/A")
A
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5", "foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
google = handle("http://google.com")
pg1 = GET(handle = google, path="/")
pg2 = GET(handle = google, path="search")
pg1
pg2
myapp = oauth_app("twitter", key = "OA82Rt05pjE5dB9drifqd3Q3G", secret = "4QuVqZ7fduB1Kx28WBPc29W77aVL34xy4GiY90ZwDZ3Cr3uOqE")
sig = sign_oauth1.0(myapp, token="951722202-TXfBI4IahowpROAV840GAkWtKZy31m6eZYUyiOG5"
token_secret = "MEEKcJPw3we18QpojRnaGIHq5Kpgq13nigzm4w0Huf03H")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
myapp = oauth_app("twitter", key = "OA82Rt05pjE5dB9drifqd3Q3G", secret = "4QuVqZ7fduB1Kx28WBPc29W77aVL34xy4GiY90ZwDZ3Cr3uOqE")
sig = sign_oauth1.0(myapp, token="951722202-TXfBI4IahowpROAV840GAkWtKZy31m6eZYUyiOG5",
token_secret = "MEEKcJPw3we18QpojRnaGIHq5Kpgq13nigzm4w0Huf03H")
myapp = oauth_app("twitter", key = "OA82Rt05pjE5dB9drifqd3Q3G", secret = "4QuVqZ7fduB1Kx28WBPc29W77aVL34xy4GiY90ZwDZ3Cr3uOqE")
sig = sign_oauth1.0(myapp, token="951722202-TXfBI4IahowpROAV840GAkWtKZy31m6eZYUyiOG5",1
token_secret = "MEEKcJPw3we18QpojRnaGIHq5Kpgq13nigzm4w0Huf03H")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
library(jsonlite)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
load("~/Data Science/Workspace/Course - DS&C/Week 3 Notes.Rmd")
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution0
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg = table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in e
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1), margin= c(4,4,2,1))
par(mfrow=c(2,1), mar= c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main ="West")
plot(east$latitude, east$pm25, main ="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
deve.cur()
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displm, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue". col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()?pin
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month ==5)
points(may$Wind, may$Ozone, col = "blue", pch = 2)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind, lty=2, lwd = 2)
)
abline(v=median(airquality$Wind, lty=2, lwd = 2))
abline(v=median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd('Course - Exp Analysis')
library(swirl)
swirl()
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, pch = 8, col = "red",  main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut(
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("mylabels.r"), local = TRUE)
source(pathtofile("mylabels.R"), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
exit()
